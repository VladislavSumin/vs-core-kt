[versions]
vs-core = "0.0.2"

# Kotlin
kotlin-core = "1.9.20"
ksp = "1.9.20-1.0.14"
kotlin-coroutines = "1.7.3"
kotlin-serialization = "1.6.0"
kotlin-atomicfu = "0.22.0"
kotlin-benchmark = "0.4.9"
kotlin-kover = "0.7.3"

# Android
android-core = "1.12.0"
android-activity = "1.8.0"
android-activity-compose = "1.8.0"
android-compose-compiler = "1.5.4"

# Compose
jb-compose = "1.5.10"
decompose = "2.1.2-compose-experimental"

# Logging
logging-log4j = "2.21.1"
logging-slf4j = "2.0.9"
logging-kotlinLogging = "5.1.0"

# Other
kodein = "7.20.2"
ktor = "2.3.4"
kotlinpoet = "1.14.2"
sqldelight = "2.0.0"
moko-resources = "0.21.2"
essenty-parcelable = "1.3.0-dev02"
multiplatformSettings = "1.1.0"
okio = "3.3.0"
vlcj = "4.8.2"
sentry = "0.2.1"

# Testing
testing-junit5-core = "5.10.0"
testing-junit5-platformSuite = "1.10.0"
# TODO заменить на mockk
testing-mockito-core = "5.5.0"
testing-mockito-kotlin = "5.1.0"
testing-turbine = "1.0.0"

# Plugins
gradlePlugins-android = "8.1.2"
gradlePlugins-checkUpdates = "0.49.0"
gradlePlugins-detekt = "1.23.3"
gradlePlugins-buildConfig = "3.0.3"
gradlePlugins-assertion = "2.5.0"


[libraries]
# Core
vs-core-analytic-sentry = { module = "ru.vs.core.analytic:sentry", version.ref = "vs-core" }
vs-core-compose = { module = "ru.vs.core:compose", version.ref = "vs-core" }
vs-core-coroutines = { module = "ru.vs.core:coroutines", version.ref = "vs-core" }
vs-core-database = { module = "ru.vs.core:database", version.ref = "vs-core" }
vs-core-decompose = { module = "ru.vs.core:decompose", version.ref = "vs-core" }
vs-core-di = { module = "ru.vs.core:di", version.ref = "vs-core" }
vs-core-factoryGenerator-api = { module = "ru.vs.core.factory-generator:api", version.ref = "vs-core" }
vs-core-factoryGenerator-ksp = { module = "ru.vs.core.factory-generator:ksp", version.ref = "vs-core" }
vs-core-keyValueStorage = { module = "ru.vs.core:key-value-storage", version.ref = "vs-core" }
vs-core-ktor-network = { module = "ru.vs.core:ktor-network", version.ref = "vs-core" }
vs-core-ktor-client = { module = "ru.vs.core:ktor-client", version.ref = "vs-core" }
vs-core-ktor-server = { module = "ru.vs.core:ktor-server", version.ref = "vs-core" }
vs-core-logging = { module = "ru.vs.core:logging", version.ref = "vs-core" }
vs-core-navigation = { module = "ru.vs.core:navigation", version.ref = "vs-core" }
vs-core-network = { module = "ru.vs.core:network", version.ref = "vs-core" }
vs-core-okio = { module = "ru.vs.core:okio", version.ref = "vs-core" }
vs-core-serialization-core = { module = "ru.vs.core.serialization:core", version.ref = "vs-core" }
vs-core-serialization-json = { module = "ru.vs.core.serialization:json", version.ref = "vs-core" }
vs-core-uikit-autoSizeText = { module = "ru.vs.core.uikit:auto-size-text", version.ref = "vs-core" }
vs-core-uikit-dropdownMenu = { module = "ru.vs.core.uikit:dropdown-menu", version.ref = "vs-core" }
vs-core-uikit-letterAvatar = { module = "ru.vs.core.uikit:letter-avatar", version.ref = "vs-core" }
vs-core-uikit-localConfiguration = { module = "ru.vs.core.uikit:local-configuration", version.ref = "vs-core" }
vs-core-uikit-videoPlayer = { module = "ru.vs.core.uikit:video-player", version.ref = "vs-core" }
vs-core-utils = { module = "ru.vs.core:utils", version.ref = "vs-core" }

# Plugins
gradlePlugins-kotlin-core = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin-core" }
gradlePlugins-kotlin-serialization = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin-core" }
gradlePlugins-kotlin-atomicfu = { module = "org.jetbrains.kotlinx:atomicfu-gradle-plugin", version.ref = "kotlin-atomicfu" }
gradlePlugins-kotlin-allopen = { module = "org.jetbrains.kotlin:kotlin-allopen", version.ref = "kotlin-core" }
gradlePlugins-kotlin-benchmark = { module = "org.jetbrains.kotlinx:kotlinx-benchmark-plugin", version.ref = "kotlin-benchmark" }
gradlePlugins-kotlin-kover = { module = "org.jetbrains.kotlinx:kover-gradle-plugin", version.ref = "kotlin-kover" }
gradlePlugins-ksp = { module = "com.google.devtools.ksp:symbol-processing-gradle-plugin", version.ref = "ksp" }
gradlePlugins-android = { module = "com.android.tools.build:gradle", version.ref = "gradlePlugins-android" }
gradlePlugins-jb-compose = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "jb-compose" }
gradlePlugins-checkUpdates = { module = "com.github.ben-manes:gradle-versions-plugin", version.ref = "gradlePlugins-checkUpdates" }
gradlePlugins-detekt = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "gradlePlugins-detekt" }
gradlePlugins-buildConfig = { module = "com.github.gmazzo:gradle-buildconfig-plugin", version.ref = "gradlePlugins-buildConfig" }
gradlePlugins-sqldelight = { module = "app.cash.sqldelight:gradle-plugin", version.ref = "sqldelight" }
gradlePlugins-moko-resources = { module = "dev.icerock.moko:resources-generator", version.ref = "moko-resources" }
gradlePlugins-assertion = { module = "com.jraska.module.graph.assertion:plugin", version.ref = "gradlePlugins-assertion" }

# Kotlin
kotlin-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlin-coroutines" }
kotlin-coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlin-coroutines" }
kotlin-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlin-coroutines" }
kotlin-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlin-serialization" }
kotlin-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlin-serialization" }
kotlin-atomicfu = { module = "org.jetbrains.kotlinx:atomicfu", version.ref = "kotlin-atomicfu" }
kotlin-benchmark = { module = "org.jetbrains.kotlinx:kotlinx-benchmark-runtime", version.ref = "kotlin-benchmark" }

# Ktor
ktor-serialization-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-network = { module = "io.ktor:ktor-network", version.ref = "ktor" }
ktor-websockets = { module = "io.ktor:ktor-websockets", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-cio = { module = "io.ktor:ktor-server-cio", version.ref = "ktor" }
ktor-server-websocket = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-websocket = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }
ktor-client-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
ktor-client-winhttp = { module = "io.ktor:ktor-client-winhttp", version.ref = "ktor" }

# Kodein
kodein-core = { module = "org.kodein.di:kodein-di", version.ref = "kodein" }
kodein-android = { module = "org.kodein.di:kodein-di-framework-android-x", version.ref = "kodein" }

# Android
android-core = { module = "androidx.core:core-ktx", version.ref = "android-core" }
android-activity = { module = "androidx.activity:activity-ktx", version.ref = "android-activity" }
android-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "android-activity-compose" }

# Decompose
decompose-core = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-jetbrains = { module = "com.arkivanov.decompose:extensions-compose-jetbrains", version.ref = "decompose" }
decompose-android = { module = "com.arkivanov.decompose:extensions-android", version.ref = "decompose" }

# Essenty
essenty-parcelable = { module = "com.arkivanov.essenty:parcelable", version.ref = "essenty-parcelable" }

# Sqldelight
sqldelight-sqlite = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqldelight" }
sqldelight-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-native = { module = "app.cash.sqldelight:native-driver", version.ref = "sqldelight" }
# sqldelight-sqljs = { module = "app.cash.sqldelight:sqljs-driver", version.ref = "sqldelight" }
sqldelight-coroutines = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }

# Logging
logging-kotlinLogging-core = { module = "io.github.oshai:kotlin-logging", version.ref = "logging-kotlinLogging" }
logging-log4j-api = { module = "org.apache.logging.log4j:log4j-api", version.ref = "logging-log4j" }
logging-log4j-core = { module = "org.apache.logging.log4j:log4j-core", version.ref = "logging-log4j" }
logging-log4j-slf4j = { module = "org.apache.logging.log4j:log4j-slf4j2-impl", version.ref = "logging-log4j" }
logging-slf4j = { module = "org.slf4j:slf4j-api", version.ref = "logging-slf4j" }

# Code generation
ksp = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "ksp" }
kotlinpoet-core = { module = "com.squareup:kotlinpoet", version.ref = "kotlinpoet" }
kotlinpoet-ksp = { module = "com.squareup:kotlinpoet-ksp", version.ref = "kotlinpoet" }

# Other
detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "gradlePlugins-detekt" }
moko-resources-core = { module = "dev.icerock.moko:resources", version.ref = "moko-resources" }
moko-resources-compose = { module = "dev.icerock.moko:resources-compose", version.ref = "moko-resources" }
multiplatformSettings-core = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatformSettings" }
multiplatformSettings-coroutines = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "multiplatformSettings" }
okio = { module = "com.squareup.okio:okio", version.ref = "okio" }
vlcj = { module = "uk.co.caprica:vlcj", version.ref = "vlcj" }
sentry = { module = "io.sentry:sentry-kotlin-multiplatform", version.ref = "sentry" }

# Testing
testing-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "testing-junit5-core" }
testing-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "testing-junit5-core" }
testing-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "testing-junit5-core" }
testing-jupiter-platformSuite = { module = "org.junit.platform:junit-platform-suite", version.ref = "testing-junit5-platformSuite" }
testing-mockito-core = { module = "org.mockito:mockito-core", version.ref = "testing-mockito-core" }
testing-mockito-jupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "testing-mockito-core" }
testing-mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "testing-mockito-kotlin" }
testing-turbine = { module = "app.cash.turbine:turbine", version.ref = "testing-turbine" }